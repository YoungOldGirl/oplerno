require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe OrdersController do
  login_user

  # This should return the minimal set of attributes required to create a valid
  # Order. As you add validations to Order, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {cart_id: @cart.id, user_id: current_user.id} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OrdersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let (:valid_cart) { {total_price: 6.00, user_id: current_user.id} }

  before(:each) do
    @cart = Cart.create! valid_cart
  end

  describe "GET new" do
    it "assigns a new order as @order" do
      get :new, {}
      assigns(:order).should be_a_new(Order)
    end
  end

  describe "POST create" do
    vcr_options = {:record => :once}
    describe "with valid params", :vcr => vcr_options do
      it "creates a new Order" do
        expect {
          post :create, {:order => valid_attributes}
        }.to change(Order, :count).by(1)
      end

      it "assigns a newly created order as @order" do
        post :create, {:order => valid_attributes}
        assigns(:order).should be_a(Order)
        assigns(:order).should be_persisted
      end

      it "redirects to the created order" do
        post :create, {:order => valid_attributes}
        response.status.should eq 302
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved order as @order" do
        # Trigger the behavior that occurs when invalid params are submitted
        Order.any_instance.stub(:save).and_return(false)
        post :create, {:order => {cart_id: @cart.id}}
        assigns(:order).should be_a_new(Order)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Order.any_instance.stub(:save).and_return(false)
        post :create, {:order => {cart_id: @cart.id}}
        response.should render_template("new")
      end
    end
  end

  describe 'GET confirm' do
    let(:valid_params) { {:token => 'EC-59R59009BF276314F', :PayerID => "H7E8K2LT573UN"} }

    vcr_options = {:record => :once}
    context 'Something', vcr: vcr_options do
      before :each do
        Order.any_instance.stub(:price_in_cents).and_return(1000*100)
        @cart = Cart.create!
        @cart.user = FactoryGirl.create(:user)
        order = @cart.build_order
        order.save
        OrdersController.any_instance.stub(:current_cart).and_return(@cart)
      end
      it 'create any error state' do
        err = ActiveMerchant::Billing::PaypalExpressResponse.new false, 'Error'
        ActiveMerchant::Billing::PaypalExpressGateway.any_instance.stub(:details_for).and_return(err)
        get :confirm, valid_params
        @cart.reload
        expect(@cart.order).to be_a Order
        expect(@cart.order.transactions[0]).to be_a OrderTransaction
        expect(@cart.order.transactions[0].success).to eq false
      end
      it 'succeeds' do
        get :confirm, valid_params
        @cart.reload
        expect(@cart.order).to be_a Order
        expect(@cart.order.transactions[0]).to be_a OrderTransaction
        expect(@cart.order.transactions[0].success).to eq true
      end
    end
  end

	describe 'Set order' do
    vcr_options = {:record => :once}
    context 'with vcr and', vcr: vcr_options do
			it 'should set a cart without params' do
				OrdersController.any_instance.stub(:purchase).and_return()
				controller.send(:set_order)
				assigns(:order).should be_a Order
			end
			it 'should set a cart with params' do
				OrdersController.any_instance.stub(:purchase).and_return()
				controller.params[:order] = {  }
				controller.send(:set_order)
				assigns(:order).should be_a Order
			end
			it 'should not set a cart based on current_cart is nil' do
				OrdersController.any_instance.stub(:current_cart).and_return(nil)
				OrdersController.any_instance.stub(:purchase).and_return()
				expect {
					controller.send(:set_order)
				}.to raise_error
			end
			it 'should set the current_user' do
				OrdersController.any_instance.stub(:purchase).and_return()
				controller.send(:set_order)
				assigns(:order).user.should eq current_user
			end
		end
	end
end
